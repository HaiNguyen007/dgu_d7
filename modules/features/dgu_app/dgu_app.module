<?php
/**
 * @file
 * Drupal needs this blank file.
 */

define('PUBLISHED_APP_GRANT', 2147483647);    // maximum possible value (avialable in Solr) to avoid conflict with $node->uid
define('APP_MODERATOR_GRANT', 2147483646); // maximum possible value (avialable in Solr) -1 to avoid conflict with $node->uid

include_once 'dgu_app.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dgu_app_form_app_node_form_alter(&$form, &$form_state, $form_id) {

  $form['#attributes']['class'][] = 'boxed';
  drupal_set_title(t('Submit an app'));

  $form['revision_information']['#type'] = 'hidden';

  $form['actions']['publish']['#access'] = TRUE;
  $form['actions']['publish']['#value'] = 'Submit for moderation';
  $form['actions']['publish']['#type'] = 'submit';
  $form['actions']['publish']['#weight'] = 6;
  $form['actions']['publish']['#submit'] = $form['actions']['submit']['#submit'];

  $form['actions']['submit']['#value'] = 'Save draft';
  $form['#submit'][] = 'dgu_app_node_submit';

  unset($form['actions']['preview']);
}

/**
 * Custom submit function for app content type.
 */
function dgu_app_node_submit($form, &$form_state) {
  if(isset($form_state['clicked_button'])) {

    $action = empty($form['#node']->nid) ? 'created' : 'updated';

    if ($form_state['clicked_button']['#value'] == "Submit for moderation") {
      $form_state['values']['workbench_moderation_state_new'] = 'needs_review';
      $message = &drupal_static(__FUNCTION__, NULL);
      $message = 'Your App has been ' . $action . ' and submitted for moderation. Login to your <a href="/admin/workbench">profile</a> to update it. You can submit this now or later';
    }
    elseif ($form_state['clicked_button']['#value'] == "Save draft") {
      $form_state['values']['workbench_moderation_state_new'] = 'draft';
      $message = &drupal_static(__FUNCTION__, NULL);
      $message = 'Your draft App has been ' . $action . '. Login to your <a href="/admin/workbench">profile</a> to update it. You can submit this now or later';
    }
  }
}

function dgu_app_exit() {
  if ($message = &drupal_static('dgu_app_node_submit', NULL)) {
    // Remove all status messages - most likely nothing more than '... has been created/updated'
    drupal_get_messages('status');
    // Add a message created in dgu_data_set_request_node_submit()
    drupal_set_message($message);
  }
}

function dgu_app_preprocess_node(&$variables) {
  if ($variables['type'] == 'app'){
    if ($variables['view_mode'] == 'search_result'){
      $variables['directory'] = 'profile/dgu/themes/custom/dguk/templates/';
      $variables['classes_array'] = array("node", "node-app-searchresult");
      $variables['submitted'] = 'Submitted on ' . $variables['date'];
      if ($variables['created'] != $variables['changed']) {
        $variables['updated'] = 'Updated on ' . format_date($variables['changed']);
      }

    }
  }
}

function dgu_app_node_access_records($node) {
  if (($node->type == 'app')) {
    $grants = array();

    $grants[] = array(
      'realm' => 'app',
      'gid' => APP_MODERATOR_GRANT,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
    );
    $grants[] = array(
      'realm' => 'app',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
    );
    if ($node->status == 1) {
      $grants[] = array(
        'realm' => 'app',
        'gid' => PUBLISHED_APP_GRANT,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
      );
    }
    return $grants;
  }
}

function dgu_app_node_grants($account, $op) {
  $grants = array();
  $grants['app'] = array($account->uid);
  $grants['app'] = array($account->uid, PUBLISHED_APP_GRANT);
  if (user_access('edit any app content', $account)) {
    $grants['app'] = array(APP_MODERATOR_GRANT);
  }
  return $grants;
}
